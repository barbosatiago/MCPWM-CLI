[1/12] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D C:\Users\tiago\OneDrive\Documentos\REPOSITORIOS\MCPWM-CLI\build\bootloader\esp-idf\esptool_py && E:\Espressif\Espressif\python_env\idf5.2_py3.11_env\Scripts\python.exe E:/Espressif/Espressif/frameworks/esp-idf-v5.2.1/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x0 C:/Users/tiago/OneDrive/Documentos/REPOSITORIOS/MCPWM-CLI/build/bootloader/bootloader.bin"
Bootloader binary size 0x5250 bytes. 0x2db0 bytes (36%) free.
[2/10] Building C object esp-idf/CLI/CMakeFiles/__idf_CLI.dir/FreeRTOS_CLI.c.obj
[3/10] Linking C static library esp-idf\CLI\libCLI.a
[4/10] Linking C static library esp-idf\multscan_shell\libmultscan_shell.a
[5/10] Linking C static library esp-idf\main\libmain.a
[6/10] Generating ld/sections.ld
[7/10] Linking CXX executable main.elf
[8/10] Generating binary image from built executable
esptool.py v4.7.0
Creating esp32s3 image...
Merged 2 ELF sections
Successfully created esp32s3 image.
Generated C:/Users/tiago/OneDrive/Documentos/REPOSITORIOS/MCPWM-CLI/build/main.bin
[9/10] cmd.exe /C "cd /D C:\Users\tiago\OneDrive\Documentos\REPOSITORIOS\MCPWM-CLI\build\esp-idf\esptool_py && E:\Espressif\Espressif\python_env\idf5.2_py3.11_env\Scripts\python.exe E:/Espressif/Espressif/frameworks/esp-idf-v5.2.1/components/partition_table/check_sizes.py --offset 0x8000 partition --type app C:/Users/tiago/OneDrive/Documentos/REPOSITORIOS/MCPWM-CLI/build/partition_table/partition-table.bin C:/Users/tiago/OneDrive/Documentos/REPOSITORIOS/MCPWM-CLI/build/main.bin"
main.bin binary size 0x42b40 bytes. Smallest app partition is 0x100000 bytes. 0xbd4c0 bytes (74%) free.
[9/10] cmd.exe /C "cd /D E:\Espressif\Espressif\frameworks\esp-idf-v5.2.1\components\esptool_py && E:\Espressif\Espressif\tools\cmake\3.24.0\bin\cmake.exe -D IDF_PATH=E:/Espressif/Espressif/frameworks/esp-idf-v5.2.1 -D SERIAL_TOOL=E:/Espressif/Espressif/python_env/idf5.2_py3.11_env/Scripts/python.exe;;E:/Espressif/Espressif/frameworks/esp-idf-v5.2.1/components/esesptool.py --chip esp32s3 -p COM14 -b 460800 --before=default_reset --after=hard_reset write_flash --flash_mode dio --flash_freq 80m --flash_size 2MB 0x0 bootloader/bootloader.bin 0x10000 main.bin 0x8000 partition_table/partition-table.bin
esptool.py v4.7.0
Serial port COM14
Connecting....
Chip is ESP32-S3 (QFN56) (revision v0.2)
Features: WiFi, BLE, Embedded PSRAM 8MB (AP_3v3)
Crystal is 40MHz
MAC: 84:fc:e6:6b:bf:bc
Uploading stub...
Running stub...
Stub running...
Changing baud rate to 460800
Changed.
Configuring flash size...
Flash will be erased from 0x00000000 to 0x00005fff...
Flash will be erased from 0x00010000 to 0x00052fff...
Flash will be erased from 0x00008000 to 0x00008fff...
Compressed 21072 bytes to 13076...
Writing at 0x00000000... (100 %)
Wrote 21072 bytes (13076 compressed) at 0x00000000 in 0.6 seconds (effective 290.1 kbit/s)...
Hash of data verified.
Compressed 273216 bytes to 134164...
Writing at 0x00010000... (11 %)
Writing at 0x0001c928... (22 %)
Writing at 0x0002535a... (33 %)
Writing at 0x0002bbac... (44 %)
Writing at 0x000321d5... (55 %)
Writing at 0x0003c2ae... (66 %)
Writing at 0x00044ec0... (77 %)
Writing at 0x0004aca1... (88 %)
Writing at 0x00051415... (100 %)
Wrote 273216 bytes (134164 compressed) at 0x00010000 in 3.1 seconds (effective 699.9 kbit/s)...
Hash of data verified.
Compressed 3072 bytes to 103...
Writing at 0x00008000... (100 %)
Wrote 3072 bytes (103 compressed) at 0x00008000 in 0.0 seconds (effective 541.8 kbit/s)...
Hash of data verified.

Leaving...
Hard resetting via RTS pin...
ptool_py/esptool/esptool.py;--chip;esp32s3 -D SERIAL_TOOL_ARGS=--before=default_reset;--after=hard_reset;write_flash;@flash_args -D WORKING_DIRECTORY=C:/Users/tiago/OneDrive/Documentos/REPOSITORIOS/MCPWM-CLI/build -P E:/Espressif/Espressif/frameworks/esp-idf-v5.2.1/components/esptool_py/run_serial_tool.cmake"
